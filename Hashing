# one pair
def sumExists(arr, N, sum):
    l=[]
    for i in range(N):
        
        l.append(arr[i])
       
    for i in range(N):
        y=sum-arr[i]
        if y==arr[i]:
            continue
        
        elif y in l:
            return 1
    return 0
# linear
class Solution:
    
    #Function to fill the array elements into a hash table 
    #using Linear Probing to handle collisions.
    def linearProbing(self, hashSize, arr, sizeOfArray):
        
        #storing -1 at all indexes in the hash table.
        hash=[-1]*hashSize
        
        #iterating over the array. 
        for i in range(sizeOfArray):
            
            #if the value of hash table at index (arr[i]%hashSize) is -1 
            #which means empty then, we insert arr[i] at that place.
            if(hash[arr[i]%hashSize]==-1): 
                hash[arr[i]%hashSize]=arr[i]
            
            #else we move linearly from the filled position 
            #to find an index with -1 in hash table.
            else:
                k=(arr[i])%hashSize;
                counter=0
                flag = 0
                #using a loop which runs until we find an index with -1
                #in hash table which means empty.
                while(counter<hashSize and hash[k]!=-1):
                    if(hash[k]==arr[i]):
                        flag=1
                        break
                    k=(1+k)%hashSize;
                    counter+=1
                
                if flag==1:
                    continue
                #if we find a position where arr[i] can be inserted 
                #then we insert the element.
                if(counter<hashSize):
                    hash[k]=arr[i]
                    
        #returning the hash table.            
        return hash
#chaining
class Solution:
    
    #Function to insert elements of array in the hashTable avoiding collisions.
    def separateChaining(self, hashSize, arr, sizeOfArray):
        l=[[] for x in range(hashSize)]
        j=0
        for i in range(len(arr)):
            j= arr[i]%hashSize
            l[j].append(arr[i])
        return l
# count
  def countNonRepeated(self,arr,n):
        d=dict()
        count=0
        for i in range(n):
            if arr[i] in d.keys():
                d[arr[i]]=d[arr[i]]+1
            else:
                d[arr[i]]=1
                
        for i in d:
            if d[i]>1:
                continue
            else:
                count=count+1
        return count
#print non repeated
def printNonRepeated(self,arr,n):
        d=dict()
        l=[]
        count=0
        for i in range(n):
            if arr[i] in d.keys():
                d[arr[i]]=d[arr[i]]+1
            else:
                d[arr[i]]=1
                
        for i in arr:
            if d[i]>1:
                continue
            else:
                l.append(i)
        return l
#first repeated value
    def firstRepeated(self,arr, n):
        d=dict()
        
        for i in range(n):
            if arr[i] in d.keys():
                d[arr[i]]=d[arr[i]]+1
            else:
                d[arr[i]]=1
                
        for i in range(n):
            if d[arr[i]]>1:
                return i+1
        return -1    

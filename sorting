# bubble sort
class Solution:
    #Function to sort the array using bubble sort algorithm.
    def bubbleSort(self,arr, n):
        for i in range(n-1):
            swap= 0
            for j in range(n-i-1):
                if arr[j]>arr[j+1]:
                    arr[j],arr[j+1]=arr[j+1],arr[j]
                    swap=1
            if swap==0:
                return arr
        return arr    
# insertion
class Solution:
    def insert(self, alist, n):
        for i in range(1 ,n):
            x=alist[i]
            j=i-1
            while j>=0 and alist[j]>x:
                alist[j+1]=alist[j]
                j=j-1
            alist[j+1]=x
        return alist
    #Function to sort the list using insertion sort algorithm.    
    def insertionSort(self, alist, n):
        
        self.insert(alist,n)
# union
def Union(a, b, n, m):
    result = [0 for _ in range(n + m)]
 
	index, left, right = 0, 0, 0
    while left < n and right < m:
 
        if (a[left] < b[right]):
 
            if(index != 0 and a[left] == result[index-1]):
                left += 1
            else:
                result[index] = a[left]
                left += 1
                index += 1
 
        else:
            if (index != 0 and b[right] == result[index-1]):
 
                right += 1
            else:
                result[index] = b[right]
                right += 1
                index += 1
 
    while(left < n):
        if(index != 0 and a[left] == result[index-1]):
            left += 1
        else:
            result[index] = a[left]
            left += 1
            index += 1
 
    while(right < m):
        if(index != 0 and b[right] == result[index - 1]):
            right += 1
        else:
            result[index] = b[right]
            right += 1
            index += 1
 
    print("Union:", *result[:index])
#union elements
 def doUnion(self,a,n,b,m):
        i=0
        j=0
        count=0
        while i<n and j<m:
            if i>0 and a[i]==a[i-1]:
                continue
            elif a[i]<b[j]:
                count=count+1
                i=i+1
                
            else:
                count=count+1
                i=i+1
                j=j+1
        while i<n:
            if i>0 and a[i]==a[i-1]:
                i=i+1
            else :
                count=count+1
                i=i+1
        while j<m:
            if j>0 and b[j]==b[j-1]:
                j=j+1
            else :
                count=count+1
                j=j+1    
        return count   

# bubble sort
class Solution:
    #Function to sort the array using bubble sort algorithm.
    def bubbleSort(self,arr, n):
        for i in range(n-1):
            swap= 0
            for j in range(n-i-1):
                if arr[j]>arr[j+1]:
                    arr[j],arr[j+1]=arr[j+1],arr[j]
                    swap=1
            if swap==0:
                return arr
        return arr    
# insertion
class Solution:
    def insert(self, alist, n):
        for i in range(1 ,n):
            x=alist[i]
            j=i-1
            while j>=0 and alist[j]>x:
                alist[j+1]=alist[j]
                j=j-1
            alist[j+1]=x
        return alist
    #Function to sort the list using insertion sort algorithm.    
    def insertionSort(self, alist, n):
        
        self.insert(alist,n)
# union
def Union(a, b, n, m):
    result = [0 for _ in range(n + m)]
 
	index, left, right = 0, 0, 0
    while left < n and right < m:
 
        if (a[left] < b[right]):
 
            if(index != 0 and a[left] == result[index-1]):
                left += 1
            else:
                result[index] = a[left]
                left += 1
                index += 1
 
        else:
            if (index != 0 and b[right] == result[index-1]):
 
                right += 1
            else:
                result[index] = b[right]
                right += 1
                index += 1
 
    while(left < n):
        if(index != 0 and a[left] == result[index-1]):
            left += 1
        else:
            result[index] = a[left]
            left += 1
            index += 1
 
    while(right < m):
        if(index != 0 and b[right] == result[index - 1]):
            right += 1
        else:
            result[index] = b[right]
            right += 1
            index += 1
 
    print("Union:", *result[:index])
#union elements
 def doUnion(self,a,n,b,m):
        i=0
        j=0
        count=0
        while i<n and j<m:
            if i>0 and a[i]==a[i-1]:
                continue
            elif a[i]<b[j]:
                count=count+1
                i=i+1
                
            else:
                count=count+1
                i=i+1
                j=j+1
        while i<n:
            if i>0 and a[i]==a[i-1]:
                i=i+1
            else :
                count=count+1
                i=i+1
        while j<m:
            if j>0 and b[j]==b[j-1]:
                j=j+1
            else :
                count=count+1
                j=j+1    
        return count   
# count inversion
class Solution:
    #Back-end complete function Template for Python 3
    
    #global variable to count total inversions
    inversion_count=0  
    
    #Function to count inversions in the array.
    def inversionCount(self, a,n):
        global inversion_count
        inversion_count = 0
        self.merge_sort(a, 0, n - 1)
        #returning the count of inversions in the array.
        return inversion_count
    
    #Function to sort and merge two parts of array.
    def merge(self, a, start, mid, end):
        global inversion_count
        temp = [0 for i in range(end - start + 1)]
        
        #i is pointer for left subarray.
        #j is pointer for right subarray.
        #k is index for resultant merged subarray.
        i, j, k = start, mid + 1, 0  
        
        #Using two pointers over the array which helps in storing the
        #smaller element and thus merging the subarray.
        while (i <= mid and j <= end):
            
            #Comparing element of the array at pointers i and j and accordingly
            #storing the smaller element and updating the pointers.
            if (a[i] <= a[j]):
                temp[k] = a[i]
                k += 1
                i += 1
            else:
                temp[k] = a[j]
                k += 1
                j += 1
                #Adding the inversions which is the number of elements which 
                #are smaller than arr[j] in the left half of the array.
                inversion_count += mid - i + 1
    
      #Copying the remaining elements of left subarray(if there are any)to temp.
        while (i <= mid):
            temp[k] = a[i]
            k += 1
            i += 1
    
      #Copying the remaining elements of right subarray(if there are any)to temp. 
        while (j <= end):
            temp[k] = a[j]
            k += 1
            j += 1
            
        #Copying back the merged elements to original array.
        for i in range(start, end + 1):
            a[i] = temp[i - start]
    
    #Function to mergesort the array, which uses divide and conquer algorithm
    #on left and right halves of array for mergesort operation.
    def merge_sort(self, a,start,end):
        
        if (start < end):
            
            mid = (start + end) // 2
            #Calling recursive function to sort left half of the array.
            self.merge_sort(a, start, mid)
            
            #Calling recursive function to sort right half of the array.
            self.merge_sort(a, mid + 1, end)
            
            #Calling merge function which sorts and merges both halves
            #of the array obtained after calling both recursive function.
            self.merge(a, start, mid, end)
#quick
class Solution:
    #Function to sort a list using quick sort algorithm.
    def quickSort(self,arr,low,high):
        if low<high:
            pivot = self.partition(arr,low,high)
            self.quickSort(arr,low,pivot)
            self.quickSort(arr,pivot+1,high)
        return arr
    
    def partition(self,arr,low,high):
        p=arr[low]
        i=low-1
        j=high+1
        while True:
            i=i+1
            while arr[i]<p:
                i=i+1
            j=j-1
            while arr[j]>p:
                j=j-1
            if i>=j:
                return j
            arr[i],arr[j]=arr[j],arr[i]
#binary arra sort
class Solution:
    
    #Function to sort the binary Aay.
    def binSort(self, A, N): 
        left = 0
        right = N-1
         
        #Using segregation method.  
        while left < right: 
            #While element at left index is 0, we increase the left index.
            while A[left] == 0 and left < right: 
                left += 1
      
            #While element at right index is 1, we decrease the right index. 
            while A[right] == 1 and left < right: 
                right -= 1
      
            #If left is smaller than right then there is a 1 at left 
            #and a 0 at right. Exchanging A[left] and A[right]. 
            if left < right: 
                A[left] = 0
                A[right] = 1
                #Updating values of left and right index. 
                left += 1
                right -= 1
# heap sort
def heapify(arr, n, i):
	largest = i # Initialize largest as root
	l = 2 * i + 1 # left = 2*i + 1
	r = 2 * i + 2 # right = 2*i + 2


	if l < n and arr[i] < arr[l]:
		largest = l


	if r < n and arr[largest] < arr[r]:
		largest = r


	if largest != i:
		(arr[i], arr[largest]) = (arr[largest], arr[i]) # swap


		heapify(arr, n, largest)



def heapSort(arr):
	n = len(arr)


	for i in range(n // 2 - 1, -1, -1):
		heapify(arr, n, i)


	for i in range(n - 1, 0, -1):
		(arr[i], arr[0]) = (arr[0], arr[i]) # swap
		heapify(arr, i, 0)


# Driver code to test above

arr = [12, 11, 13, 5, 6, 7, ]
heapSort(arr)
n = len(arr)
print('Sorted array is')
for i in range(n):
	print(arr[i])
                


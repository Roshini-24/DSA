#insert a stack
  def InsertInStack(self,n,arr):
        stack=[]
        for i in range (n):
            stack.append(arr[i])
        return stack
# stack using list
def push(data):
    global stackMax
    global top
    global stack
    top+=1

    if(top>=stackMax):
        top-=1
        print("Stack Full")
    else:
        stack[top]=data
      

def pop():
    global stack
    global stackMax
    global top
    if(top<=-1):
        print("Stack Empty")
    else:
        stack[top]=-1
        top-=1


        
        
def display():
    global stack
    global stackMax
    global top
    if(top<=-1):
        print(-1)
    else:
        i=0
        limit=top if top<stackMax else stackMax-1
        while(i<=top):
            print(stack[i],end=" ")
            i+=1
        print()
#using linkedist
class MyStack:


    # class StackNode:

    # # Constructor to initialize a node
    def __init__(self):
        self.head = None
        
        
    #Function to push an integer into the stack.
    def push(self, data):

        temp=StackNode(data)
        temp.next=self.head
        self.head=temp


    #Function to remove an item from top of the stack.
    def pop(self):
        if self.head==None:
            return -1
        res=self.head.data
        self.head=self.head.next
        return res



from collections import deque
class Solution:
    #Function to convert prefix expression to infix expression.
    def preToInfix(self, s):
        def isOperator(x):
            return (ch in '+-*/^%')
    
        stack = deque()
        n = len(s)
        
        #iterating over the prefix expression from right to left.
        for i in range(n - 1, -1, -1):
            ch = s[i]
            
            #if current character is an operator, pop the last two elements 
            #from stack and create the infix expression for the current 
            #operator and operands and push it back to the stack.
            if isOperator(ch):
                op1 = stack.pop()
                op2 = stack.pop()
                temp = '(' + op1 + ch + op2 + ')'
                stack.append(temp)
            else:
                #if current character is not an operator, push it to the stack.
                stack.append(ch)
        
        #return the infix expression obtained after converting the prefix expression.
        return stack.pop()



from collections import deque
class Solution:
    # Function to convert postfix expression to infix expression.
    def postToInfix(self, postfix):
        # Function to check if a character is an operand.
        def isOperand(x):
            return ('a'<=x<='z') or ('A'<=x<='Z')
        
        stack = deque()
        n = len(postfix)
        for i in range(n):
            if isOperand(postfix[i]):
                stack.append(postfix[i])
            else:
                op1 = stack.pop()
                op2 = stack.pop()
                stack.append("("+op2+postfix[i]+op1+")")
        
        return stack[-1]


class Solution:
    
    #Function to remove consecutive duplicates from given string using Stack.
    def removeConsecutiveDuplicates(self,s):
      
        if len(s) == 1:
            return s
        stack = []
        top = ''
        for x in range(len(s)):
            if s[x] == top:
                continue
            else:
                if stack and stack[-1] == s[x]:
                    top = stack.pop()
                else:
                    stack.append(s[x])
                    top = s[x]
        res = ''
        while stack:
            res += stack.pop()
        return res[::-1]

class Solution:
    
    #Function to remove pair of duplicates from given string using Stack.
    def removePair(self,s):
        

#stack inititation
        stack = []
        size = 0
        #base case
        if len(s) == 1:
            return s
        top = ''
        
        for x in s:
            #wrong if condition what is size of stack is 0
            # if s[x] == top:
            #     stack.pop()
            if size == 0 or x!=stack[-1]:
                stack.append(x)
                size+=1
            else:
                stack.pop()
                size-=1
                # combine these
                # if stack and stack[-1] == s[x]:
                #     top = stack.pop()
                # else:
                #     stack.append(s[x])
                #     top = s[x]
        if size==0:
            return "Empty String"
        res = ''
        while size:
        #     res += stack.pop()
            # print(res)
            res =  stack.pop()+res
            size-=1
        return res

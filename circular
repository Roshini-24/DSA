#traverse
  if head == None:
        return
    print(head.key, end=" ")
    curr = head.next
    while curr != head:
        print(curr.key, end=" ")
        curr = curr.next
    def getLength(head):
    if head == None:
        return
    count=1
    curr = head.next
    while curr != head:
        count=count+1
        curr = curr.next
    return count
#display
          def displayList(head):
    if head == None:
        return
    l=[]
    l.append(head.data)
    curr = head.next
    while curr != head:
        l.append(curr.data)
        curr = curr.next
    return l
#insertdef insertBeg(head, x):
    temp = Node(x)
    if head == None:
        temp.next = temp
        return temp
    curr = head
    while curr.next != head:
        curr = curr.next

    curr.next = temp
    temp.next = head
    return temp
  def insertBeg(head,x):

    temp = Node(x)
    if head == None:
        temp.next = temp
        return temp
    else:
        temp.next = head.next
        head.next = temp
        
        head.data,temp.data = temp.data,head.data   # swapping data
        return head
#insertend
def insertInTail(head,x):
    temp = Node(x)

    if head == None:
        temp.next = temp
        return temp
    else:
        curr = head
        while curr.next != head:
            curr = curr.next

        curr.next = temp
        temp.next = head

        return head
#delete end
def deleteTail(head):
    

    if head == None or head.next==None:
        return None
    else:
        curr = head
        while curr.next.next != head:
            curr = curr.next

        curr.next = head
        

        return head
#check for circular
def isCircular(head):
    if head==None:
        return 1
    else:
        curr=head
        while curr!=None:
            if curr.next==head:
                return 1
            curr=curr.next
        return 0
#delete head
def deleteHead(head):
    if head == None or head.next == head:
        return None

    curr = head
    while curr.next != head:
        curr = curr.next
    curr.next = head.next
    return curr.next
#insertpos
def insertAtPosition(head,pos,data):
    

    node=Node(data)
    i=1
    t=head

    while t.next!=head and i<pos:
        i+=1
        t=t.next
    if i==pos:
        node.next=t.next
        t.next=node
#delpos
def delHead(head):
    head.data=head.next.data
    head.next=head.next.next
    return head
    
def deleteAtPosition(head,pos):
    if head == None or head.next==head:
        return None

    elif pos == 1:
        return delHead(head)

    else:
        curr = head

        for i in range(pos - 2):
            curr = curr.next

        curr.next = curr.next.next
        return head

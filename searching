# serach an element
class Solution:
    ##Complete this function
    def searchInSorted(self,arr, N, K):
        l=0
        h=len(arr)-1
        while l<=h:
            mid=(l+h)//2
            if arr[mid]==K:
                return 1
            elif arr[mid]<K:
                l=mid+1
            else:
                h=mid-1
        return -1
        # last and first occurence 
        class Solution:
    def leftIndex (self, N, arr, X):
        l=0
        h=N-1
        while l<=h:
            mid=(l+h)//2
            if arr[mid]<X:
                l=mid+1
            elif arr[mid]>X:
                h=mid-1
            else: 
                if mid==0 or arr[mid-1]!=arr[mid]:
                    return mid
                else:
                    h=mid-1
        return-1
# no idea
class Solution:   
    def findPeakUtil(self,arr,low,high,n):
        # calculating mid
        mid=(low+high)//2
        # if mid is last or first index with first element
        # greater than next.
        # Also, check if mid element is greater than mid - 1 and mid+1
        if (mid==0 or arr[mid-1]<=arr[mid]) and (mid==n-1 or arr[mid+1]<=arr[mid] ):
            return mid
        # If mid is other than 0, then check if mid element is less than prev.
        # If so, then recurse for lower half
        elif (mid>0 and arr[mid-1]>arr[mid]):
            return self.findPeakUtil(arr,low,mid-1,n)
        # else recurse for the upper half
        else :
            return self.findPeakUtil(arr,mid+1,high,n)
    def peakElement(self,arr, n):
        return self.findPeakUtil(arr,0,n-1,n)

# counts
class Solution:
    ##Complete this code
    def countOnes(self,arr, N):
        l=0
        h=N-1
        while l<=h:
            mid=(l+h)//2
            if arr[mid]==0:
                h=mid-1
            elif arr[mid]>1:
                l=mid+1
            else:    
                if mid==N-1 or arr[mid+1]!= 1:
                    return mid+1
                else:
                    l=mid+1
        return 0

            
               

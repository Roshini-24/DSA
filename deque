class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.prev = None

def insertFront(front, rear, data):
    temp = Node(data)
    if rear is None and front is None:
        return temp, temp
    front.prev = temp
    temp.next = front
    return temp, rear

def insertRear(front, rear, data):
    temp = Node(data)
    if rear is None:
        return temp, temp
    else:
        rear.next = temp
        temp.prev = rear
        return front, temp

def delFront(front, rear):
    if front is None:
        print("List is empty.")
        return None, None
    else:
        res = front.data
        front = front.next
        if front is None:
            rear = None
        else:
            front.prev = None
        return res, front, rear

def delRear(front, rear):
    if rear is None:
        print("List is empty.")
        return None, None
    else:
        res = rear.data
        rear = rear.prev
        if rear is None:
            front = None
        else:
            rear.next = None
        return res, front, rear



@using list.....need to define capacuty first
class MyDeque:
    def __init__(self, c):
        self.l = [None] * c
        self.cap = c
        self.size = 0
        self.front = 0

    def deleteFront(self):
        if self.size == 0:
            return None
        else:
            res = self.l[self.front]
            self.front = (self.front + 1) % self.cap
            self.size = self.size - 1

            return res

    def insertFront(self, x):

        if self.size == self.cap:
            return
        else:
            self.front = (self.front - 1) % self.cap
            self.l[self.front] = x
            self.size = self.size + 1

    def insertRear(self, x):
        if self.size == self.cap:
            return
        new_rear = (self.front + self.size) % self.cap
        self.l[new_rear] = x
        self.size = self.size + 1

    def deleteRear(self):
        sz = self.size
        if sz == 0:
            return None
        else:
            rear = (self.front + sz - 1) % self.cap
            self.size = sz - 1
            return self.l[rear]

    def frontEle(self):
        return self.l[self.front]

    def rearEle(self):
        rear = (self.front + self.size - 1) % self.cap
        return self.l[rear]


dq = MyDeque(4)

dq.insertRear(10)
print(dq.frontEle(), dq.rearEle())
dq.insertFront(20)
print(dq.frontEle(), dq.rearEle())
dq.insertFront(30)
print(dq.frontEle(), dq.rearEle())
dq.deleteRear()
print(dq.frontEle(), dq.rearEle())
dq.insertRear(40)
print(dq.frontEle(), dq.rearEle())
dq.deleteRear()
print(dq.frontEle(), dq.rearEle())


#simple operation
def push_front_pf(dq,x):
    dq.appendleft(x)
    

#Function to push element x to the back of the deque.
def push_back_pb(dq,x):
    dq.append(x)
    
#Function to return element from front of the deque.
def front_dq(dq):
    if dq:
        
        return dq[0]
    else:
        return -1
#Function to pop element from back of the deque.
def pop_back_ppb(dq):
    if dq:
        return dq.pop()
    else:
        return -1
